// // // // // // // // // // // // // // // // // // // // // #include<iostream>
// // // // // // // // // // // // // // // // // // // // // using namespace std;
// // // // // // // // // // // // // // // // // // // // // int main()
// // // // // // // // // // // // // // // // // // // // // {
// // // // // // // // // // // // // // // // // // // // //     cout<<"Namaste World";
// // // // // // // // // // // // // // // // // // // // //     return 0;
// // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // #include <iostream>
// // // // // // // // // // // // // // // // // // // // using namespace std;
// // // // // // // // // // // // // // // // // // // // // int main()
// // // // // // // // // // // // // // // // // // // // // {
// // // // // // // // // // // // // // // // // // // // //     char a;
// // // // // // // // // // // // // // // // // // // // //     cin >> a ;

// // // // // // // // // // // // // // // // // // // // //     if (  a >=  'a' &&  a <= 'z')
// // // // // // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // // // // // //         cout << "It is lower case "<<endl;
// // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // //     else if (a >=  'A' &&  a <= 'Z')
// // // // // // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // // // // // //         cout << "It is Upper case " << endl;
// // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // //     else if (a>=  '0' &&  a <= '9')
// // // // // // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // // // // // //         cout<<"it is numeric "<<endl;
// // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // int main ()
// // // // // // // // // // // // // // // // // // // // // {
// // // // // // // // // // // // // // // // // // // // //     int n;
// // // // // // // // // // // // // // // // // // // // //      cin >> n;
// // // // // // // // // // // // // // // // // // // // //      int i = 1;

// // // // // // // // // // // // // // // // // // // // //      while(i <=n)
// // // // // // // // // // // // // // // // // // // // //      {

// // // // // // // // // // // // // // // // // // // // //         cout<<i<<" "; i = i+1;
// // // // // // // // // // // // // // // // // // // // //      }
// // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // int main()
// // // // // // // // // // // // // // // // // // // // // {
// // // // // // // // // // // // // // // // // // // // //     int n;
// // // // // // // // // // // // // // // // // // // // //     cin >>n;

// // // // // // // // // // // // // // // // // // // // //     int sum = 0;
// // // // // // // // // // // // // // // // // // // // //     int i = 1;

// // // // // // // // // // // // // // // // // // // // //     while(i<=n)
// // // // // // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // // // // // //         // cout<<sum<<endl;
// // // // // // // // // // // // // // // // // // // // //         sum= sum+i;
// // // // // // // // // // // // // // // // // // // // //         i = i+2;

// // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // //     cout<<sum<<endl;

// // // // // // // // // // // // // // // // // // // // //check number is prime or not

// // // // // // // // // // // // // // // // // // // // int main()
// // // // // // // // // // // // // // // // // // // // {
// // // // // // // // // // // // // // // // // // // //     int n;
// // // // // // // // // // // // // // // // // // // //     cin >> n;

// // // // // // // // // // // // // // // // // // // //     int i = 2;
// // // // // // // // // // // // // // // // // // // //     while(i<n)
// // // // // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // // // // //         if(n%i==0)
// // // // // // // // // // // // // // // // // // // //         {
// // // // // // // // // // // // // // // // // // // //             cout<<"Not Prime"<<endl;
// // // // // // // // // // // // // // // // // // // //             break;
// // // // // // // // // // // // // // // // // // // //         // }
// // // // // // // // // // // // // // // // // // // //         i = i+1;
// // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // //     if(i==n)
// // // // // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // // // // //         cout<<"Prime"<<endl;
// // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // #include <map>
// // // // // // // // // // // // // // // // // // // #include <iostream>
// // // // // // // // // // // // // // // // // // // using namespace std;

// // // // // // // // // // // // // // // // // // // int main()
// // // // // // // // // // // // // // // // // // // {
// // // // // // // // // // // // // // // // // // //     map<int, int> Hagu;

// // // // // // // // // // // // // // // // // // //     Hagu[1] = 12;
// // // // // // // // // // // // // // // // // // //     Hagu[2] = 14;
// // // // // // // // // // // // // // // // // // //     Hagu[3] = 14;
// // // // // // // // // // // // // // // // // // //     Hagu[4] = 15;
// // // // // // // // // // // // // // // // // // //     Hagu[5] = 16;

// // // // // // // // // // // // // // // // // // //     map<int, int>::iterator Lendi;
// // // // // // // // // // // // // // // // // // //     for (Lendi = Hagu.begin(); Lendi != Hagu.end(); Lendi++)
// // // // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // // // //         cout << (*Lendi).first << " " << (*Lendi).second << endl;
// // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // //     // Hagu.insert({{[6] = 23}, {[7] = 123}});
// // // // // // // // // // // // // // // // // // //     Hagu[23] = 23234;

// // // // // // // // // // // // // // // // // // //     cout << endl
// // // // // // // // // // // // // // // // // // //          << endl;

// // // // // // // // // // // // // // // // // // //     map<int, int>::iterator BhagBc;

// // // // // // // // // // // // // // // // // // //     for (BhagBc = Hagu.begin(); BhagBc != Hagu.end(); BhagBc++)
// // // // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // // // //         cout << (*BhagBc).first << " " << (*BhagBc).second << endl;
// // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // #include <iostream>
// // // // // // // // // // // // // // // // // // // #include <map>
// // // // // // // // // // // // // // // // // // // using namespace std;

// // // // // // // // // // // // // // // // // // // int main()
// // // // // // // // // // // // // // // // // // // {
// // // // // // // // // // // // // // // // // // //     map<int, int> MyMap;

// // // // // // // // // // // // // // // // // // //     MyMap[1] = 12 ;
// // // // // // // // // // // // // // // // // // //     MyMap[2] = 21;
// // // // // // // // // // // // // // // // // // //     MyMap[3] = 13;
// // // // // // // // // // // // // // // // // // //     MyMap[7] = 322;
// // // // // // // // // // // // // // // // // // //     MyMap[4] = 32322;
// // // // // // // // // // // // // // // // // // //     MyMap[5] = 1232;
// // // // // // // // // // // // // // // // // // //     MyMap[6] = 12342;

// // // // // // // // // // // // // // // // // // //     map<int , int>:: iterator iterate;
// // // // // // // // // // // // // // // // // // //     for(iterate = MyMap.begin() ; iterate!= MyMap.end() ;iterate++)
// // // // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // // // //         // cout<<endl;
// // // // // // // // // // // // // // // // // // //         cout<<(*iterate).first <<" " <<(*iterate).second<<endl;

// // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // //    MyMap.insert(make_pair(323 , 23));
// // // // // // // // // // // // // // // // // // //    cout<<endl;

// // // // // // // // // // // // // // // // // // //   for(iterate = MyMap.begin() ; iterate!= MyMap.end() ;iterate++)
// // // // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // // // //         // cout<<endl;
// // // // // // // // // // // // // // // // // // //         cout<<(*iterate).first <<" " <<(*iterate).second<<endl;

// // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // /*------18/01/2023------*/
// // // // // // // // // // // // // // // // // // #include <bits/stdc++.h> //jai ganesh
// // // // // // // // // // // // // // // // // // using namespace std;
// // // // // // // // // // // // // // // // // // int main()
// // // // // // // // // // // // // // // // // // {
// // // // // // // // // // // // // // // // // //     int t;
// // // // // // // // // // // // // // // // // //     cin >> t;
// // // // // // // // // // // // // // // // // //     while (t > 0)
// // // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // // //         int n;
// // // // // // // // // // // // // // // // // //         cin >> n;
// // // // // // // // // // // // // // // // // //         int arr[n];
// // // // // // // // // // // // // // // // // //         int count = 0;
// // // // // // // // // // // // // // // // // //         int flag = 0;
// // // // // // // // // // // // // // // // // //         for (int i = 0; i < n; i++)
// // // // // // // // // // // // // // // // // //         {
// // // // // // // // // // // // // // // // // //             cin >> arr[i];

// // // // // // // // // // // // // // // // // //             if (arr[i] == 0)
// // // // // // // // // // // // // // // // // //             {
// // // // // // // // // // // // // // // // // //                 flag = 1;
// // // // // // // // // // // // // // // // // //             }

// // // // // // // // // // // // // // // // // //             if (arr[i] < 0)
// // // // // // // // // // // // // // // // // //             {
// // // // // // // // // // // // // // // // // //                 count++;
// // // // // // // // // // // // // // // // // //             }
// // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // //         if (count % 2 == 0 || flag != 0)
// // // // // // // // // // // // // // // // // //             cout << "0" << endl;

// // // // // // // // // // // // // // // // // //         else
// // // // // // // // // // // // // // // // // //             cout << (count % 2) << endl;

// // // // // // // // // // // // // // // // // //         t--;
// // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // //     return 0;
// // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // #include <iostream>
// // // // // // // // // // // // // // // // // using namespace std;

// // // // // // // // // // // // // // // // // int main()
// // // // // // // // // // // // // // // // // {
// // // // // // // // // // // // // // // // //     int n;
// // // // // // // // // // // // // // // // //     cin >> n;
// // // // // // // // // // // // // // // // //     int arr[n];
// // // // // // // // // // // // // // // // //     int store = 0;
// // // // // // // // // // // // // // // // //     // int end = n;
// // // // // // // // // // // // // // // // //     int k;
// // // // // // // // // // // // // // // // //     cout << "enter k";
// // // // // // // // // // // // // // // // //     cin >> k;
// // // // // // // // // // // // // // // // //     for (int i = 0; i < n; i++)
// // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // //         cin >> arr[i];
// // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // //     for (int i = 0; i < n; i++)
// // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // //         store = arr[0];

// // // // // // // // // // // // // // // // //         if (store < arr[i])
// // // // // // // // // // // // // // // // //         {
// // // // // // // // // // // // // // // // //             store = arr[i];
// // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // //     cout << store << endl;

// // // // // // // // // // // // // // // // //     // end = arr[k];

// // // // // // // // // // // // // // // // //     for (int i = store; i > k; i--)
// // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // //         store = arr[i];
// // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // //     cout << store << endl;
// // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // #include <algorithm>
// // // // // // // // // // // // // // // // // #include <iostream>
// // // // // // // // // // // // // // // // // #include <bits/stdc++.h>
// // // // // // // // // // // // // // // // // using namespace std;

// // // // // // // // // // // // // // // // // int main()
// // // // // // // // // // // // // // // // // {
// // // // // // // // // // // // // // // // //     int n;
// // // // // // // // // // // // // // // // //     cin >> n;
// // // // // // // // // // // // // // // // //     vector<int> arr(n);
// // // // // // // // // // // // // // // // //     for (int i = 0; i < n; i++)
// // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // //         cin >> arr[i];
// // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // //     int min = *min_element(arr.begin(), arr.end());

// // // // // // // // // // // // // // // // //     int max = *max_element(arr.begin(), arr.end());

// // // // // // // // // // // // // // // // //     // for(auto i : )

// // // // // // // // // // // // // // // // //     // cout << min << " " << max << endl;
// // // // // // // // // // // // // // // // //     // for (auto element : arr)
// // // // // // // // // // // // // // // // //     // {
// // // // // // // // // // // // // // // // //     //     cout << element << " ";
// // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // //     // cout << endl;

// // // // // // // // // // // // // // // // //     // int IndexMaxStart = 0;
// // // // // // // // // // // // // // // // //     int IndexMaxStart = -1;
// // // // // // // // // // // // // // // // //     int IndexMaxEnd = -1;

// // // // // // // // // // // // // // // // //     int IndexMinStart = -1;
// // // // // // // // // // // // // // // // //     int IndexMinEnd = -1;

// // // // // // // // // // // // // // // // //     int delMin = 0;
// // // // // // // // // // // // // // // // //     int delMax = 0;
// // // // // // // // // // // // // // // // //     for (int i = 0; i < n; i++)
// // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // //         if (arr[i] == max)
// // // // // // // // // // // // // // // // //         {
// // // // // // // // // // // // // // // // //             IndexMaxStart = std::abs(i - 0);
// // // // // // // // // // // // // // // // //             break;
// // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // //     // cout << IndexMaxStart << " ";

// // // // // // // // // // // // // // // // //     for (int i = n - 1; i >= 0; i--)
// // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // //         if (arr[i] == max)
// // // // // // // // // // // // // // // // //         {

// // // // // // // // // // // // // // // // //             IndexMaxEnd = std::abs(i - (n - 1));
// // // // // // // // // // // // // // // // //             break;
// // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // //     for (int i = 0; i < n; i++)
// // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // //         if (arr[i] == min)
// // // // // // // // // // // // // // // // //         {
// // // // // // // // // // // // // // // // //             IndexMinStart = std::abs(i - (n - 1));
// // // // // // // // // // // // // // // // //             break;
// // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // //     // cout << IndexMinStart << " ";

// // // // // // // // // // // // // // // // //     for (int i = n - 1; i >= 0; i--)
// // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // //         if (arr[i] == min)
// // // // // // // // // // // // // // // // //         {
// // // // // // // // // // // // // // // // //             IndexMinEnd++;
// // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // //     if (IndexMaxEnd == 0)
// // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // //         IndexMaxEnd = 1;
// // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // //     if (IndexMinEnd == 0)
// // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // //         IndexMinEnd = 1;
// // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // //     if (IndexMinStart == 0)
// // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // //         IndexMinStart = 1;
// // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // //     if (IndexMaxStart == 0)
// // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // //         IndexMaxStart = 1;
// // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // //     if (IndexMaxEnd > IndexMaxStart)
// // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // //         delMax = IndexMaxStart;
// // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // //     if (IndexMaxEnd < IndexMaxStart)
// // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // //         delMax = IndexMaxEnd;
// // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // //     if (IndexMinEnd > IndexMaxStart)
// // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // //         delMin = IndexMinStart;
// // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // //     if (IndexMinEnd < IndexMinStart)
// // // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // // //         delMin = IndexMinEnd;
// // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // //     cout << delMin + delMax;
// // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // #include <algorithm>
// // // // // // // // // // // // // // // // #include <iostream>
// // // // // // // // // // // // // // // // #include <vector>

// // // // // // // // // // // // // // // // using namespace std;

// // // // // // // // // // // // // // // // int main()
// // // // // // // // // // // // // // // // {
// // // // // // // // // // // // // // // //     int n;
// // // // // // // // // // // // // // // //     cin >> n;
// // // // // // // // // // // // // // // //     vector<int> arr(n);

// // // // // // // // // // // // // // // //     for (int i = 0; i < n; i++)
// // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // //         cin >> arr[i];
// // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // //     int minValue = *min_element(arr.begin(), arr.end());
// // // // // // // // // // // // // // // //     int maxValue = *max_element(arr.begin(), arr.end());

// // // // // // // // // // // // // // // //     int indexMinStart = -1;
// // // // // // // // // // // // // // // //     int indexMinEnd = -1;
// // // // // // // // // // // // // // // //     int indexMaxStart = -1;
// // // // // // // // // // // // // // // //     int indexMaxEnd = -1;

// // // // // // // // // // // // // // // //     for (int i = 0; i < n; i++)
// // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // //         if (arr[i] == minValue)
// // // // // // // // // // // // // // // //         {
// // // // // // // // // // // // // // // //             indexMinStart = i; // Fixed calculation of IndexMinStart
// // // // // // // // // // // // // // // //             break;
// // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // //     for (int i = n - 1; i >= 0; i--)
// // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // //         if (arr[i] == minValue)
// // // // // // // // // // // // // // // //         {
// // // // // // // // // // // // // // // //             indexMinEnd = i;
// // // // // // // // // // // // // // // //             break;
// // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // //     for (int i = 0; i < n; i++)
// // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // //         if (arr[i] == maxValue)
// // // // // // // // // // // // // // // //         {
// // // // // // // // // // // // // // // //             indexMaxStart = i;
// // // // // // // // // // // // // // // //             break;
// // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // //     for (int i = n - 1; i >= 0; i--)
// // // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // // //         if (arr[i] == maxValue)
// // // // // // // // // // // // // // // //         {
// // // // // // // // // // // // // // // //             indexMaxEnd = i;
// // // // // // // // // // // // // // // //             break;
// // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // //     int delMin = max(indexMinStart, n - 1 - indexMinEnd); // Fixed calculation of delMin
// // // // // // // // // // // // // // // //     int delMax = max(indexMaxStart, n - 1 - indexMaxEnd); // Fixed calculation of delMax

// // // // // // // // // // // // // // // //     cout << delMin + delMax << endl;

// // // // // // // // // // // // // // // //     return 0;
// // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // #include <iostream>
// // // // // // // // // // // // // // // #include <vector>
// // // // // // // // // // // // // // // #include <algorithm>

// // // // // // // // // // // // // // // using namespace std;

// // // // // // // // // // // // // // // int main()
// // // // // // // // // // // // // // // {
// // // // // // // // // // // // // // //     int n;
// // // // // // // // // // // // // // //     cin >> n;
// // // // // // // // // // // // // // //     vector<int> arr(n);

// // // // // // // // // // // // // // //     for (int i = 0; i < n; i++)
// // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // //         cin >> arr[i];
// // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // //     int minValue = *min_element(arr.begin(), arr.end());
// // // // // // // // // // // // // // //     int maxValue = *max_element(arr.begin(), arr.end());

// // // // // // // // // // // // // // //     int indexMin = -1;
// // // // // // // // // // // // // // //     int indexMax = -1;

// // // // // // // // // // // // // // //     for (int i = 0; i < n; i++)
// // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // //         if (arr[i] == minValue)
// // // // // // // // // // // // // // //         {
// // // // // // // // // // // // // // //             indexMin = i;
// // // // // // // // // // // // // // //             break;
// // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // //     for (int i = n - 1; i >= 0; i--)
// // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // //         if (arr[i] == maxValue)
// // // // // // // // // // // // // // //         {
// // // // // // // // // // // // // // //             indexMax = i;
// // // // // // // // // // // // // // //             break;
// // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // //     // Calculate the minimum number of deletions
// // // // // // // // // // // // // // //     int result = max(indexMin, n - 1 - indexMax) + max(indexMax, n - 1 - indexMin);

// // // // // // // // // // // // // // //     cout << result << endl;

// // // // // // // // // // // // // // //     return 0;
// // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // #include <iostream>
// // // // // // // // // // // // // // #include <vector>
// // // // // // // // // // // // // // #include <algorithm>

// // // // // // // // // // // // // // using namespace std;

// // // // // // // // // // // // // // int main()
// // // // // // // // // // // // // // {
// // // // // // // // // // // // // //     int n;
// // // // // // // // // // // // // //     cin >> n;
// // // // // // // // // // // // // //     vector<int> arr(n);

// // // // // // // // // // // // // //     for (int i = 0; i < n; i++)
// // // // // // // // // // // // // //     {
// // // // // // // // // // // // // //         cin >> arr[i];
// // // // // // // // // // // // // //     }

// // // // // // // // // // // // // //     int minValue = *min_element(arr.begin(), arr.end());
// // // // // // // // // // // // // //     int maxValue = *max_element(arr.begin(), arr.end());

// // // // // // // // // // // // // //     int indexMin = -1;
// // // // // // // // // // // // // //     int indexMax = -1;

// // // // // // // // // // // // // //     for (int i = 0; i < n; i++)
// // // // // // // // // // // // // //     {
// // // // // // // // // // // // // //         if (arr[i] == minValue)
// // // // // // // // // // // // // //         {
// // // // // // // // // // // // // //             indexMin = i;
// // // // // // // // // // // // // //             break;
// // // // // // // // // // // // // //         }
// // // // // // // // // // // // // //     }

// // // // // // // // // // // // // //     for (int i = n - 1; i >= 0; i--)
// // // // // // // // // // // // // //     {
// // // // // // // // // // // // // //         if (arr[i] == maxValue)
// // // // // // // // // // // // // //         {
// // // // // // // // // // // // // //             indexMax = i;
// // // // // // // // // // // // // //             break;
// // // // // // // // // // // // // //         }
// // // // // // // // // // // // // //     }

// // // // // // // // // // // // // //     // Calculate the minimum number of deletions
// // // // // // // // // // // // // //     int result = max(indexMin, n - 1 - indexMin) + max(indexMax, n - 1 - indexMax);

// // // // // // // // // // // // // //     cout << result << endl;

// // // // // // // // // // // // // //     return 0;
// // // // // // // // // // // // // // }

// // // // // // // // // // // // // // #include <iostream>
// // // // // // // // // // // // // // #include <vector>
// // // // // // // // // // // // // // #include <algorithm>

// // // // // // // // // // // // // // using namespace std;

// // // // // // // // // // // // // // int minDeletions(vector<int> &nums)
// // // // // // // // // // // // // // {
// // // // // // // // // // // // // //     int n = nums.size();
// // // // // // // // // // // // // //     int minValue = *min_element(nums.begin(), nums.end());
// // // // // // // // // // // // // //     int maxValue = *max_element(nums.begin(), nums.end());

// // // // // // // // // // // // // //     int indexMin = -1;
// // // // // // // // // // // // // //     int indexMax = -1;

// // // // // // // // // // // // // //     for (int i = 0; i < n; i++)
// // // // // // // // // // // // // //     {
// // // // // // // // // // // // // //         if (nums[i] == minValue)
// // // // // // // // // // // // // //         {
// // // // // // // // // // // // // //             indexMin = i;
// // // // // // // // // // // // // //             break;
// // // // // // // // // // // // // //         }
// // // // // // // // // // // // // //     }

// // // // // // // // // // // // // //     for (int i = n - 1; i >= 0; i--)
// // // // // // // // // // // // // //     {
// // // // // // // // // // // // // //         if (nums[i] == maxValue)
// // // // // // // // // // // // // //         {
// // // // // // // // // // // // // //             indexMax = i;
// // // // // // // // // // // // // //             break;
// // // // // // // // // // // // // //         }
// // // // // // // // // // // // // //     }

// // // // // // // // // // // // // //     int frontDeletions = max(indexMin, n - 1 - indexMax);
// // // // // // // // // // // // // //     int backDeletions = max(indexMax, n - 1 - indexMin);

// // // // // // // // // // // // // //     return min(frontDeletions, backDeletions);
// // // // // // // // // // // // // // }

// // // // // // // // // // // // // // int main()
// // // // // // // // // // // // // // {
// // // // // // // // // // // // // //     // Example 1
// // // // // // // // // // // // // //     vector<int> nums1 = {2, 10, 7, 5, 4, 1, 8, 6};
// // // // // // // // // // // // // //     cout << "Example 1: " << minDeletions(nums1) << endl;

// // // // // // // // // // // // // //     // Example 2
// // // // // // // // // // // // // //     vector<int> nums2 = {0, -4, 19, 1, 8, -2, -3, 5};
// // // // // // // // // // // // // //     cout << "Example 2: " << minDeletions(nums2) << endl;

// // // // // // // // // // // // // //     // Example 3
// // // // // // // // // // // // // //     vector<int> nums3 = {101};
// // // // // // // // // // // // // //     cout << "Example 3: " << minDeletions(nums3) << endl;

// // // // // // // // // // // // // //     return 0;
// // // // // // // // // // // // // // }
// // // // // // // // // // // // // #include <iostream>
// // // // // // // // // // // // // #include <vector>
// // // // // // // // // // // // // #include <algorithm>

// // // // // // // // // // // // // using namespace std;

// // // // // // // // // // // // // int minDeletions(vector<int>& nums) {
// // // // // // // // // // // // //     int n = nums.size();

// // // // // // // // // // // // //     // Find the indices of the minimum and maximum elements
// // // // // // // // // // // // //     int minIndex = distance(nums.begin(), min_element(nums.begin(), nums.end()));
// // // // // // // // // // // // //     int maxIndex = distance(nums.begin(), max_element(nums.begin(), nums.end()));

// // // // // // // // // // // // //     // Find the length of the longest subarray including both minimum and maximum elements
// // // // // // // // // // // // //     int subarrayLength = max(maxIndex, n - 1 - minIndex) - min(minIndex, n - 1 - maxIndex) + 1;

// // // // // // // // // // // // //     // Calculate the number of deletions required
// // // // // // // // // // // // //     int deletions = n - subarrayLength;

// // // // // // // // // // // // //     return deletions;
// // // // // // // // // // // // // }

// // // // // // // // // // // // // int main() {
// // // // // // // // // // // // //     // Example 1
// // // // // // // // // // // // //     vector<int> nums1 = {2, 10, 7, 5, 4, 1, 8, 6};
// // // // // // // // // // // // //     cout << "Example 1: " << minDeletions(nums1) << endl;

// // // // // // // // // // // // //     // Example 2
// // // // // // // // // // // // //     vector<int> nums2 = {0, -4, 19, 1, 8, -2, -3, 5};
// // // // // // // // // // // // //     cout << "Example 2: " << minDeletions(nums2) << endl;

// // // // // // // // // // // // //     // Example 3
// // // // // // // // // // // // //     vector<int> nums3 = {101};
// // // // // // // // // // // // //     cout << "Example 3: " << minDeletions(nums3) << endl;

// // // // // // // // // // // // //     return 0;
// // // // // // // // // // // // // }

// // // // // // // // // // // // #include <iostream>
// // // // // // // // // // // // #include <vector>
// // // // // // // // // // // // #include <algorithm>

// // // // // // // // // // // // using namespace std;

// // // // // // // // // // // // int minDeletions(vector<int> &nums)
// // // // // // // // // // // // {
// // // // // // // // // // // //     int n = nums.size();

// // // // // // // // // // // //     // Find the indices of the minimum and maximum elements
// // // // // // // // // // // //     int minIndex = distance(nums.begin(), min_element(nums.begin(), nums.end()));
// // // // // // // // // // // //     int maxIndex = distance(nums.begin(), max_element(nums.begin(), nums.end()));

// // // // // // // // // // // //     // Calculate the distances from the start and end
// // // // // // // // // // // //     int distanceFromStart = min(minIndex, n - 1 - minIndex);
// // // // // // // // // // // //     int distanceFromEnd = min(maxIndex, n - 1 - maxIndex);

// // // // // // // // // // // //     // Calculate the number of deletions required
// // // // // // // // // // // //     int deletions = distanceFromStart + distanceFromEnd;

// // // // // // // // // // // //     return deletions;
// // // // // // // // // // // // }

// // // // // // // // // // // // int main()
// // // // // // // // // // // // {
// // // // // // // // // // // //     // Example 1
// // // // // // // // // // // //     vector<int> nums1 = {2, 10, 7, 5, 4, 1, 8, 6};
// // // // // // // // // // // //     cout << "Example 1: " << minDeletions(nums1) << endl;

// // // // // // // // // // // //     // Example 2
// // // // // // // // // // // //     vector<int> nums2 = {0, -4, 19, 1, 8, -2, -3, 5};
// // // // // // // // // // // //     cout << "Example 2: " << minDeletions(nums2) << endl;

// // // // // // // // // // // //     // Example 3
// // // // // // // // // // // //     vector<int> nums3 = {101};
// // // // // // // // // // // //     cout << "Example 3: " << minDeletions(nums3) << endl;

// // // // // // // // // // // //     return 0;
// // // // // // // // // // // // }

// // // // // // // // // // // #include <bits/stdc++.h>
// // // // // // // // // // // // #include <vector>
// // // // // // // // // // // using namespace std;

// // // // // // // // // // // int main()
// // // // // // // // // // // {
// // // // // // // // // // //     vector<int> nums = {3, 4, 5, 1, 2};

// // // // // // // // // // //     // Rest of the code

// // // // // // // // // // //     sort(nums.rbegin(), nums.rend());

// // // // // // // // // // //     for (int i = 0; i < nums.size(); i++)
// // // // // // // // // // //     {
// // // // // // // // // // //         cout << nums[i] << endl;
// // // // // // // // // // //     }

// // // // // // // // // // //     cout<<nums[nums.size()-1];

// // // // // // // // // // //     return 0;
// // // // // // // // // // // }

// // // // // // // // // // // #include <iostream>

// // // // // // // // // // // int main() {
// // // // // // // // // // //     int arr[] = {1, 1, 2, 3, 4};
// // // // // // // // // // //     int n = sizeof(arr) / sizeof(arr[0]);

// // // // // // // // // // //     // XOR array with itself
// // // // // // // // // // //     for (int i = 0; i < n; i++) {
// // // // // // // // // // //         arr[i] = arr[i] ^ arr[i];
// // // // // // // // // // //     }

// // // // // // // // // // //     // Display the result
// // // // // // // // // // //     std::cout << "Result after XOR with itself: ";
// // // // // // // // // // //     for (int i = 0; i < n; i++) {
// // // // // // // // // // //         std::cout << arr[i] << " ";
// // // // // // // // // // //     }

// // // // // // // // // // //     return 0;
// // // // // // // // // // // }

// // // // // // // // // // // make vector

// // // // // // // // // // #include <iostream>
// // // // // // // // // // #include <vector>
// // // // // // // // // // #include <algorithm>
// // // // // // // // // // #include <map>
// // // // // // // // // // using namespace std;

// // // // // // // // // // int main()
// // // // // // // // // // {
// // // // // // // // // //     vector<int> temp;

// // // // // // // // // //     temp = {1, 2, 3, 2};

// // // // // // // // // //     map<int, int> mp;
// // // // // // // // // //     for (auto i : temp)
// // // // // // // // // //     {
// // // // // // // // // //         mp[i]++;
// // // // // // // // // //     }

// // // // // // // // // //     for (auto i : mp)
// // // // // // // // // //     {
// // // // // // // // // //         cout << i.first << " " << i.second << endl;
// // // // // // // // // //     }

// // // // // // // // // //     vector<int> temp2;

// // // // // // // // // //     for (auto i : mp)
// // // // // // // // // //     {
// // // // // // // // // //         if (i.second == 1)
// // // // // // // // // //         {
// // // // // // // // // //             temp2.push_back(i.first);
// // // // // // // // // //         }
// // // // // // // // // //     }

// // // // // // // // // //     for (int i = 0; i < temp2.size(); i++)
// // // // // // // // // //     {
// // // // // // // // // //         cout << temp2[i] << " ";
// // // // // // // // // //     }
// // // // // // // // // //     cout << endl;
// // // // // // // // // //     cout << "__________________________________";
// // // // // // // // // //     cout << endl;
// // // // // // // // // //     int sum = 0;
// // // // // // // // // //     for (int i = 0; i < temp2.size(); i++)
// // // // // // // // // //     {
// // // // // // // // // //         sum = sum + temp2[i];
// // // // // // // // // //     }

// // // // // // // // // //     cout << sum << endl;
// // // // // // // // // // }

// // // // // // // // // #include <iostream>
// // // // // // // // // using namespace std;

// // // // // // // // // // ListNode class to represent the elements
// // // // // // // // // class ListNode
// // // // // // // // // {
// // // // // // // // // public:
// // // // // // // // //     int data;
// // // // // // // // //     ListNode *next;
// // // // // // // // //     ListNode(int val) : data(val), next(nullptr) {}
// // // // // // // // // };

// // // // // // // // // // LinkedList class to manage the list
// // // // // // // // // class LinkedList
// // // // // // // // // {
// // // // // // // // // public:
// // // // // // // // //     ListNode *head;
// // // // // // // // //     LinkedList() : head(nullptr) {}

// // // // // // // // //     // Method to insert a new ListNode at the end of the linked list
// // // // // // // // //     void insert(int data)
// // // // // // // // //     {
// // // // // // // // //         ListNode *new_ListNode = new ListNode(data);
// // // // // // // // //         if (head == nullptr)
// // // // // // // // //         {
// // // // // // // // //             head = new_ListNode;
// // // // // // // // //         }
// // // // // // // // //         else
// // // // // // // // //         {
// // // // // // // // //             ListNode *temp = head;
// // // // // // // // //             while (temp->next != nullptr)
// // // // // // // // //             {
// // // // // // // // //                 temp = temp->next;
// // // // // // // // //             }
// // // // // // // // //             temp->next = new_ListNode;
// // // // // // // // //         }
// // // // // // // // //     }

// // // // // // // // //     // Method to display the linked list
// // // // // // // // //     void display()
// // // // // // // // //     {
// // // // // // // // //         ListNode *temp = head;
// // // // // // // // //         while (temp != nullptr)
// // // // // // // // //         {
// // // // // // // // //             cout << temp->data << " ";
// // // // // // // // //             temp = temp->next;
// // // // // // // // //         }
// // // // // // // // //     }
// // // // // // // // // };

// // // // // // // // // int main()
// // // // // // // // // {
// // // // // // // // //     LinkedList list;
// // // // // // // // //     int arr[] = {1, 2, 3, 4, 4, 5};
// // // // // // // // //     int n = sizeof(arr) / sizeof(arr[0]);
// // // // // // // // //     for (int i = 0; i < n; i++)
// // // // // // // // //     {
// // // // // // // // //         list.insert(arr[i]);
// // // // // // // // //     }
// // // // // // // // //     list.display();
// // // // // // // // //     return 0;
// // // // // // // // // }

// // // // // // // // #include <iostream>
// // // // // // // // #include <vector>
// // // // // // // // using namespace std;

// // // // // // // // int main()
// // // // // // // // {
// // // // // // // //     int n = {1, 2, 3, 4, 5, 6, 7, 8};
// // // // // // // //     vector<int> temp;

// // // // // // // //     for (int i = 0; i < num.size(); i++)
// // // // // // // //     {
// // // // // // // //         while (num != 0)
// // // // // // // //         {
// // // // // // // //             temp.push_back(n % 10);
// // // // // // // //             n = n / 10;
// // // // // // // //         }

// // // // // // // //         for (int i = 0; i < temp.size(); i++)
// // // // // // // //         {
// // // // // // // //             cout << temp[i] << " ";
// // // // // // // //         }
// // // // // // // //     }
// // // // // // // // }

// // // // // // // #include<iostream>
// // // // // // // using namespace std;
// // // // // // // int main()
// // // // // // // {
// // // // // // //     int n  = 10;
// // // // // // //     int p = 2.00000;
// // // // // // //     int i = n;
// // // // // // //     double ans = 1 ;

// // // // // // //     //ans = 1024

// // // // // // //     while(i--)
// // // // // // //     {
// // // // // // //         ans  = ans *p;
// // // // // // //     }
// // // // // // //     cout<<ans;
// // // // // // // }

// // // // // // // #include <vector>
// // // // // // // #include <iostream>
// // // // // // // using namespace std;

// // // // // // // int main()
// // // // // // // {
// // // // // // //     vector<int> nums = {-1, 0, 1, 2, -1, -4};
// // // // // // //     // Rest of the code...
// // // // // // //     vector<int> temp1;
// // // // // // //     vector<int> temp2;

// // // // // // //     for (int i = 0; i < nums.size() - 2; i++)
// // // // // // //     {
// // // // // // //         int fix = nums[i];

// // // // // // //         for (int j = 1; j < nums.size(); j++)
// // // // // // //         {
// // // // // // //             if (nums[j - 1] + nums[j] + fix == 0)
// // // // // // //             {
// // // // // // //                 temp1.push_back(nums[j - 1]);
// // // // // // //                 temp1.push_back(nums[j]);
// // // // // // //                 temp1.push_back(fix);
// // // // // // //             }
// // // // // // //         }
// // // // // // //         temp2.push_back(temp1);
// // // // // // //         temp1.clear(); // Clear temp1 vector for the next iteration
// // // // // // //     }

// // // // // // //     for (int i = 0; i < temp2.size(); i++)
// // // // // // //     {
// // // // // // //         cout << temp2[i] << " ";
// // // // // // //     }
// // // // // // // }

// // // // // // #include <vector>
// // // // // // #include <iostream>
// // // // // // using namespace std;

// // // // // // int main()
// // // // // // {
// // // // // //     vector<int> nums = {-1, 0, 1, 2, -1, -4};
// // // // // //     vector<vector<int>> temp2; // Use vector of vectors to store triplets

// // // // // //     for (int i = 0; i < nums.size() - 2; i++)
// // // // // //     {
// // // // // //         int fix = nums[i];

// // // // // //         for (int j = i + 1; j < nums.size(); j++) // Start from i+1 to avoid duplicate triplets
// // // // // //         {
// // // // // //             for (int k = j + 1; k < nums.size(); k++) // Another loop to find the third element
// // // // // //             {
// // // // // //                 if (nums[j] + nums[k] + fix == 0)
// // // // // //                 {
// // // // // //                     vector<int> triplet = {nums[j - 1], nums[j], fix};
// // // // // //                     temp2.push_back(triplet);
// // // // // //                 }
// // // // // //             }
// // // // // //         }
// // // // // //     }

// // // // // //     // Print the triplets
// // // // // //     for (int i = 0; i < temp2.size(); i++)
// // // // // //     {
// // // // // //         for (int j = 0; j < temp2[i].size(); j++)
// // // // // //         {
// // // // // //             cout << temp2[i][j] << " ";
// // // // // //         }
// // // // // //         cout << endl;
// // // // // //     }

// // // // // //     return 0;
// // // // // // }

// // // // // #include <iostream>

// // // // // // Define a ListNode structure
// // // // // struct ListNode
// // // // // {
// // // // //     int data;
// // // // //     ListNode *next;

// // // // //     // Constructor
// // // // //     ListNode(int value) : data(value), next(nullptr) {}
// // // // // };

// // // // // // Define a LinkedList class
// // // // // class LinkedList
// // // // // {
// // // // // private:
// // // // //     ListNode *head;

// // // // // public:
// // // // //     // Constructor
// // // // //     LinkedList() : head(nullptr) {}

// // // // //     // Function to add a new ListNode to the end of the list
// // // // //     void append(int value)
// // // // //     {
// // // // //         ListNode *newListNode = new ListNode(value);
// // // // //         if (head == nullptr)
// // // // //         {
// // // // //             head = newListNode;
// // // // //         }
// // // // //         else
// // // // //         {
// // // // //             ListNode *current = head;
// // // // //             while (current->next != nullptr)
// // // // //             {
// // // // //                 current = current->next;
// // // // //             }
// // // // //             current->next = newListNode;
// // // // //         }
// // // // //     }

// // // // //     // Function to print the linked list
// // // // //     void display()
// // // // //     {
// // // // //         ListNode *current = head;
// // // // //         while (current != nullptr)
// // // // //         {
// // // // //             std::cout << current->data << " ";
// // // // //             current = current->next;
// // // // //         }
// // // // //         std::cout << std::endl;
// // // // //     }
// // // // // };

// // // // // int main()
// // // // // {
// // // // //     // Create a linked list with values 1, 2, 4, 5, 6, 7, 6
// // // // //     LinkedList myList;
// // // // //     myList.append(1);
// // // // //     myList.append(2);
// // // // //     myList.append(4);
// // // // //     myList.append(5);
// // // // //     myList.append(6);
// // // // //     myList.append(7);
// // // // //     myList.append(6);

// // // // //     // Display the linked list
// // // // //     myList.display();

// // // // //     return 0;
// // // // // }

// // // // #include <iostream>
// // // // #include <vector>
// // // // #include <algorithm>
// // // // #include <string>

// // // // using namespace std;

// // // // int main()
// // // // {
// // // //     vector<string> words = {"abc", "car", "ada", "racecar", "cool"};

// // // //     cout << words[1];
// // // //     // string str = "Hello, world!";
// // // //     // reverse(str.begin(), str.end()); // str becomes "!dlrow ,olleH"
// // // // cout<<endl;
// // // //     reverse(words[1].begin(), words[1].end());
// // // //     cout<<words[1];
// // // // }
// // // #include <vector>
// // // #include <iostream>
// // // using namespace std;

// // // int main()
// // // {
// // //     int n;
// // //     cin >> n;
// // //     int m;
// // //     cin >> m;
// // //     int matrix[n][m];

// // //     vector<int> temp;

// // //     for (int i = 0; i < n; i++)
// // //     {
// // //         for (int j = 0; j < m; j++)
// // //         {
// // //             cin >> matrix[i][j];
// // //         }
// // //     }

// // //     for (int i = 0; i < n; i++)
// // //     {
// // //         for (int j = 0; j < m; j++)
// // //         {
// // //             cout << " " << matrix[i][j];
// // //         }
// // //         cout << endl;
// // //     }

// // //     cout << endl;
// // //     cout << endl;
// // //     cout << endl;

// // //     // for (int i = 0; i < m; i++)
// // //     // {
// // //     //     for (int j = 0; j < n; j++)
// // //     //     {
// // //     //         cout << " " << matrix[j][i];
// // //     //     }
// // //     //     cout << endl;
// // //     // }

// // //     int sumRow = 0 ;
// // //     for(int i = 0 ; i<n ; i++)
// // //     {
// // //         for(int j = 0 ; j<m ; j++)
// // //         {

// // //         }

// // //     }
// // // }

// // #include <iostream>

// // int main() {
// //     // Define the size of the arrays
// //     const int size = 5;

// //     // Create the first array and initialize it
// //     int a[size] = {1, 2, 3, 4, 5};

// //     // Create the second array
// //     int b[size];

// //     // Copy the data from array 'a' to array 'b'
// //     for(int i = 0; i < size; i++) {
// //         b[i] = a[i];
// //     }

// //     // Print the contents of both arrays to verify they have the same data
// //     std::cout << "Array a: ";
// //     for(int i = 0; i < size; i++) {
// //         std::cout << a[i] << " ";
// //     }

// //     std::cout << "\nArray b: ";
// //     for(int i = 0; i < size; i++) {
// //         std::cout << b[i] << " ";
// //     }

// //     #include <iostream>

// //     int main() {
// //         // Define the size of the arrays
// //         const int size = 5;

// //         // Create the first array and initialize it
// //         int a[size] = {1, 2, 3, 4, 5};

// //         // Create the second array
// //         int b[size];

// //         // Copy the data from array 'a' to array 'b'
// //         for(int i = 0; i < size; i++) {
// //             b[i] = a[i];
// //         }

// //         // Compare the arrays for equality
// //         bool equal = true;
// //         for(int i = 0; i < size; i++) {
// //             if(a[i] != b[i]) {
// //                 equal = false;
// //                 break;
// //             }
// //         }

// //         // Print the result
// //         if(equal) {
// //             std::cout << "The
// //     return 0;
// // }

// class Solution
// {
//     private:
//     ListNode* reverse(ListNode* head) {

//         ListNode* curr = head;
//         ListNode* prev = NULL;
//         ListNode* next = NULL;

//         while(curr != NULL) {
//             next = curr -> next;
//             curr -> next = prev;
//             prev = curr;
//             curr = next;
//         }
//         return prev;
//     }

//     void insertAtTail(struct ListNode* &head, struct ListNode* &tail, int val) {

//         ListNode* temp = new ListNode(val);
//         //empty list
//         if(head == NULL) {
//             head = temp;
//             tail = temp;
//             return;
//         }
//         else
//         {
//             tail -> next = temp;
//             tail = temp;
//         }
//     }

//     struct ListNode* add(struct ListNode* first, struct ListNode* second) {
//         int carry = 0;

//         ListNode* ansHead = NULL;
//         ListNode* ansTail = NULL;

//         while(first != NULL || second != NULL || carry != 0) {

//             int val1 = 0;
//             if(first != NULL)
//                 val1 = first -> data;

//             int val2 = 0;
//             if(second !=NULL)
//                 val2 = second -> data;

//             int sum = carry + val1 + val2;

//             int digit = sum%10;

//             //create ListNode and add in answer Linked List
//             insertAtTail(ansHead, ansTail, digit);

//             carry = sum/10;
//             if(first != NULL)
//                 first = first -> next;

//             if(second != NULL)
//                 second = second -> next;
//         }
//         return ansHead;
//     }
//     public:
//     //Function to add two numbers represented by linked list.
//     struct ListNode* addTwoLists(struct ListNode* first, struct ListNode* second)
//     {
//         //step 1 -  reverse input LL
//         first = reverse(first);
//         second = reverse(second);

//         //step2 - add 2 LL
//         ListNode* ans = add(first, second);

//         //step 3
//         ans = reverse(ans);

//         return ans;
//     }
// };

// ---------------------------------------------------------------------------------------------------------------------
#include <vector>
#include <iostream>
#include <string>
using namespace std;
int main()
{
    vector<string> list1 = {"Shogun", "Tapioca Express", "Burger King", "KFC"};
    vector<string> list2 = {"Piatti", "The Grill at Torrey Pines", "Hungry Hunter Steakhouse", "Shogun"};
    vector<string> list3;
    // Rest of your code...

    for (int i = 0; i < list1.size(); i++)
    {
        for (int j = i+1; j < list1.size(); j++)
        {
            if (list1[i] == list2[j])
            {
                list3.push_back(list1[i]);
            }
        }
    }

   for (const auto& l : list3) {
       std::cout << l << std::endl;
   }
    
    return 0;
}